Rendu : 

Pokedex

Yram / Tristan / Tom

Sommaire :
Intro : 
	Présentation
	Cahier des charges
	Membre du groupe

Conception :
	Outils utilisés
	Stratégie de developpement
	Problèmes attendus et rencontrés

	Evolutions du projet
	Performances du project
	Mise en production

Conclusion :
	Etat du projet
	Conclusions personnelles
	Prolongements
	Retour sur les choix faits
	Axes d'améliorations



Présentation :
Nous nous sommes mis en groupe de 3 (Yran Tristan Tom) pour ce projet.
Et avons choisi de faire un pokédex.
Le but du projet était la réalisation d'un site mettant en forme un pokédex. 
Nous avons commencé a immaginer quelles pourraient êtres les différentes pages de notre site et les avons consignés par écrit.
La validation de ces dernières par nos proffesseurs à conduit à un cahier des charges 'bien' défini.


Cahier des charges: 
Page Pokedex = Acceuil (le fondement du projet) :
	- Liste de tous les pokémons existants
	- Système de filtre et recherche
	- Détails disponibles pour chaques pokémons
	- Syncronisation avec un pokedex personnel (favoris / capture/ equipes)

Page Table des types :
	- Faiblesses et resistances par types
	- Possibilité de prendre en compte les doubles types

Page Cartes des différents jeux :
	- Interactivité (possibilité de voir les pokemons présentS dans une zone séléctionnée)

Page Joueur :
	- Information sur le joueur / compte
	- Liste d'amis
	- Possibilité de voir les pokemons favoris / capturés / mis dans uen équipe

Page Inscription

Page Items : 
	- Liste des différents items pouvant êtres trouvés dans le jeu

Page Attaque : 
	- Liste des attaques 
	- Système de recherche et de filtre
	- Détails des attaques

Page Forum
(Facultatif : page de jeux (quizz...), page de combat, se battre, choix des amis (duel), choix de l'équipe)

Membre du groupe : 
Yram :

Tristan :

Tom :
	Domaine de stage : Application communicante avec une base de donnée. (Stage à partir de fin Janvier)
	Me débrouille avec le SQL
	Me débrouille avec n'importe quel language appris (en l'occurence : PHP, HTML, CSS, JS, SQL)
	Préfère le dev back-end
	Préfère utiliser les languages directement (préfère js pur, pas de framework/libraries)
	Préfère travailler seul


Conception :
Outils utilisés : 
	Github / GitHubDesktop (gestion de version, collaboration)
	VisualStudioCode (IDE) (pour nous trois)
	Xampp / Uwamp (en fonction des disponibilité dans les salles asignés pour nos heures de projets et du parefeu)
	Languages : HTML / CSS / JS / PHP / SQL
	Ajax (pour js)

Stratégie de développement : 
	Très incrémentale, pour commencer, nous avons tous choisi une page et avons commencé à la designer en s'aidant de la maquette associer
	Nous avons commencé avec : page Pokedex, le header et la page table des types
	
	Yram :
	Tristan:
	Tom : J'ai choisi de commencer avec la page 'table des types', je ne voulais pas attaquer trop gros pour rentrer doucement dans le projet, une fois finie (juste en attente des données),
		j'ai ensuite attaqué la page 'cartes' car j'ai trouvé interessant de savoir comment on allait procéder pour 'l'intéractivité' et, je sais que j'allais avoir pas mal de travail sur cette page

	
	Or, lors de la réalisation de ces pages quelque chose s'est avéré manquant : les données.
	Cela nous à un moment échappé, alors on a commencé avec des exemples (de data)
	
	Tom : après concertation, j'ai laissé la page 'cartes' de coté pour me concentrer sur la base de données

	L'API la plus complète que nous aillons trouvé était celle de PokeAPI
	Donc nous avons basé notre base de données sur celle-ci.
	
	Puis pour chaqun d'entre nous : après avoir fini base de données ou page, on passait sur la page suivante.
	En faisant attention à répartir les pages pour que chaque personne touche à tous les langages

	Tom : Après avoir fait en partie les cartes et avoir "finalisé" la base de données, je me suis tourné vers un autre gros morceau : le forum
		le forum bien avancé, j'ai terminé la page 'cartes'
		et ma dernière réalisation fut la page 'attaque'
		Tout au long de la réalisation, je me suis aussi chargé de correction des données / mise à jour dans la base de données.

	Sur nos pages, la structure était de notre ressort, mais la DA à été appliquée à la fin par Tristan
	Et pour les versions mobiles (responsive), nous les avons fait avec tristan après avoir réalisés les versions pc
	Yram:
		J'ai de mon coté utilisé le framework bootstrap sur mes pages, mais quand je l'ai découvert Tristan et Tom avec déja bien avancé leurs pages, on a essayé de mettre bootstrap dessus, mais cela créait des problèmes dans la disposition	

Probèmes attendu et recontrés :
	Yram :
	Tristan : 
	Tom : 
		Page 'table des types':
			je ne m'attendais pas à avoir de problème concernant cette page

		    	mais forcé de l'admettre, mes premiers jets n'était pas forcément très réussi
 			utilisation d'une checkbox (custom) pour la selection de doubles types (que je n'arrivait pas à gérer (en responsive))
			j'avais prévu de mettre un marqueur rouge pour mettre en valeur la ou les lignes séléectionée par l'utilisateur, gérer sa position et sa taille s'est arrévé tricky
			au final, le marqueur et la checkbox ont disparu pour laissé place a une autre méthode : griser les cellules non selectionnées

			Cette facon était plus ergonomique, car elle metait plus en évidence les cellues selectionnées

		Page 'cartes' :
			je m'attendais a avoir quelques difficultés survenir au moment de l'interactivité comme : 
				déplacer et zoomer la carte
				faire une carte qui réagit à la souris
				faire en sorte que la liste des localisation soit liée aux localisation sur la carte (je voyais ca très long)
			
			finalement :	
				les fonctions pour se déplacer et zoomer sur la carte ont été rapidement mises en service, seuls quelques petit problème restait mais une scénace de debuggage a suffi a les eliminés, peut être utiliser des canvas la prochaine fois
				pour faire la carte qui réagit à la souris : un svg était la solution évidente (quelques petit problèmes rencontrés pour changer le contenu d'un balise svg, mais qui a fini par se résoudre en placant les svg dans des variables js (voir svg.js)
				faire le lien entre les elements svg et la liste des localisations à demander des efforts supplémentaires : se débrouiller pour avoir le meme résultat par un click sur l'un ou l'autre, mais à partir d'object totalement différents
				
				certains élément svg ont des problemes, par eg. route mi-eau, mi-terre, pour y pallier j'ai essayer de ne faire qu'une route, de la cloner et de la mettre en avant plan quand on intéragi avec, mais j'ai abandonner cette idée trop consomatrice en temps et source d'autres problèmes
		
		Base de données : 
			Quand je me suis lancé dans la base de données, je ne savais pas du tout à quoi m'attendre, juste une bonne tournée de SQL et que cela prendrait certainement un peu de temps
			
			Le donnée ne sont pas faites à la main, elles ont été récupérer sur des APIs
			Notre site a besoin de ces données pour fonctionner correctement, mais, elles ne peuvent être récuprérée directement par des appels API mais,trop long quand à la quantité de données dont le projet à besoins, il fallait une vrai base de données
			Après conseil des proffesseurs : j'ai téléchargé l'API (pokeAPI) et ai été cherchéer les informations dont j'avais besoin pour créer ma base directement dans les fichiers
			J'ai choisi de les lire en PHP car c'est une techno vue en cours et pour la quelle on s'est déja servi pour se connecter à une base de donnée. C'est aussi le languages utilisé pour faire nos pages html (et les remplir directement de données) 
			En me battant donc avec les versions PHP différentes entre les différents postes de travail

 			J'ai eu besoin de l'apport d'un autre API (tyradex) pour combler les manques dans la première

			J'ai du créer de nouvelle tables pour faire des liens entre deux autres (cette implémentation était plus efficace), car rien n'est régulier dans pokémon, il n'y a pas un nombre fixe d'attribut par pokemon
			Par exemple : 
				Le nombre d'évolution varie entre 1 et 8, mais on ne sait pas si dans le futur ces chiffres évolueront
				Donc j'ai fait un table intermédaire qui comprends, l'id d'un pokemon, et celui de son évolution, pour chaque évolution
			
			J'ai commencé par des boucle 'for' pour récupérer mes valeurs (image fichiers), mais cela ne coincidait pas avec les id des pokémons (rien n'est régulier), j'ai donc utiilisé un fichier déja présent qui liste tous les autres
			
			Selon les postes de travail, la facon de se connecter à la base diffère (utilisation de mots de passes ou non), j'ai pallier à ce problème via un fichier config.php, mais l'adaption est quand meme manuel, je préfèrerai que ce soit autiomatisé dans le futur
			
			J'ai essayer de construire la base en pensant au futur et comment elle serait utilisée pour construire les pages, mais mes prédiction nétait pas toujours suffisantes et des modifications de strucure ont du voir le jour (notament concernant les évolutions) (rajout de données)

			Pour intéragir avec les éléments des pages et actualiser les données, il me fallait un accès à la base à partir du JavaScript, une solution qu'on nopus à proposer était les requetes xmlhttp, ce que l'on a utilisé pour faires toutes nos requetes à partir du JS en passant donc par un fichier getDBData.php
				Mais la facon dont on l'utilise n'est pas du tout sécurisée, n'importe qui pourrait avoir accès à la base dans son entièreté, (s'occuper de la sécurité n'était pas notre priorité, il fallait que ca fonctionne, et le site n'est pas hébergé).
			
			Pour remplir la base, je ne peux pas envoyer toutes mes données d'un coups, la limite maximale c'est 2000 ko, j'ai du faire plusieurs insertions pour une seule table et créer uen fonction qui s'occupe de ca
			
		Page 'forum' :
			Un gros morceau à faire, beaucoup de temps à passer, le problème ettendu : récuperer l'id user

			Pour l'id de l'utilisateur, j'ai demander des conseil, on m'a proposer d'utiliser les cookies, ce que je n'ai pas réussi à faire, et j'ai choisi la solution de facilité qui foncionne très bien, le mettre en data dans une div

Evolutions du projet :
	

Performances du project
	fonctionnement assez rapide, cependant, après des test sur un pc moins performant, des problemes de temps de chargement sont apparus
	
	Certaines solution ont tout de meme été mises en place

	Tristan : 
		J'ai essayer de limiter le nombre d'appel a la base de donnée sur la page pokedex : 
			par exemple : récupération des favoris et capturés dans une seule requete 
				projet finalement abandonée du a la complexité de la requete

	Tom :
		J'ai moi meme fait les frais de probleme de temps d'éxecution d'algorithmes de tri sur les attaques:
			Je deplacait des élements sur la page HTML a chauqe tour de boucle
			une solution plus rapide à juste été de les trier dans un tableau et d'actualiser le sql seulement une fois tout le tableau trié


Prolongements :
	Sécurité
	Faire les pages facultatives : tout ce qui fait parti du combat
	Modération sur le forum
	Creation de theme plus intuitive et ergonnomique pour le forum
	Hébergement
	Retravail sur la responsive (reconstruction des pages)
	Completion base de données (données / francais)
	Données erronée à changer

	


	